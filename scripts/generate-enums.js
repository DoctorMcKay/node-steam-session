const FS = require('fs');
const HTTPS = require('https');
const Path = require('path');

const ENUMS = [
	'EAuthSessionGuardType',
	'EAuthTokenPlatformType',
	'EMsg',
	'EResult',
	'ESessionPersistence',
	'EOSType',
	'ETokenRenewalType',

	// Following enums-steam are only used in typescript definitions for protobufs
	'EBanContentCheckResult',
	'EProtoClanEventType',
	'EAuthSessionSecurityHistory',
	'EAuthTokenState',
	'EAuthTokenRevokeAction'
];

const GENERATED_FILE_HEADER = `/* eslint-disable */\n// Auto-generated by generate-enums script on ${(new Date()).toString()}\n\n`;

main();

async function main() {
	for (let i = 0; i < ENUMS.length; i++) {
		let name = ENUMS[i];
		let url = `https://raw.githubusercontent.com/DoctorMcKay/node-steam-user/master/enums/${name}.js`;
		console.log(`Download ${url}`);

		let body = await download(url);
		let module = {};
		eval(body);

		let enumModule = module.exports;
		let enumValues = [];
		for (let i in enumModule) {
			if (typeof enumModule[i] != 'number') {
				continue;
			}

			enumValues.push({name: i, value: enumModule[i]});
		}

		enumValues.sort((a, b) => a.value < b.value ? -1 : 1);

		let output = `${GENERATED_FILE_HEADER}enum ${name} {\n`;
		output += enumValues.map(({name, value}) => `\t${name} = ${value}`).join(',\n');
		output += `\n}\n\nexport default ${name};\n`;

		FS.writeFileSync(Path.join(__dirname, '..', 'src', 'enums-steam', `${name}.ts`), output);
		console.log(`Written ${name}.ts`);
	}
}

function download(url) {
	return new Promise((resolve, reject) => {
		let req = HTTPS.get(url, (res) => {
			if (res.statusCode != 200) {
				return reject(new Error(`HTTP error ${res.statusCode}`));
			}

			let body = '';
			res.on('data', chunk => body += chunk.toString('utf8'));
			res.on('end', () => resolve(body));
		});

		req.on('error', reject);
	});
}

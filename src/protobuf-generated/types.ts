/* eslint-disable */
// Auto-generated by generate-protos script on Fri Jun 30 2023 01:16:25 GMT-0400 (Eastern Daylight Time)

import EAuthSessionGuardType from '../../src/enums-steam/EAuthSessionGuardType';
import EAuthSessionSecurityHistory from '../../src/enums-steam/EAuthSessionSecurityHistory';
import EAuthTokenPlatformType from '../../src/enums-steam/EAuthTokenPlatformType';
import EAuthTokenRevokeAction from '../../src/enums-steam/EAuthTokenRevokeAction';
import EAuthTokenState from '../../src/enums-steam/EAuthTokenState';
import EBanContentCheckResult from '../../src/enums-steam/EBanContentCheckResult';
import EMsg from '../../src/enums-steam/EMsg';
import EOSType from '../../src/enums-steam/EOSType';
import EProtoClanEventType from '../../src/enums-steam/EProtoClanEventType';
import EResult from '../../src/enums-steam/EResult';
import ESessionPersistence from '../../src/enums-steam/ESessionPersistence';
import ETokenRenewalType from '../../src/enums-steam/ETokenRenewalType';

///////////////////////////////////////////////
// custom.proto
///////////////////////////////////////////////

export interface CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData {
	device_friendly_name?: string;
	account_name?: string;
	encrypted_password?: string;
	encryption_timestamp?: string;
	remember_login?: boolean;
	platform_type?: EAuthTokenPlatformType;
	persistence?: ESessionPersistence;
	website_id?: string;
	device_details?: CAuthentication_DeviceDetails;
	guard_data?: Buffer;
	language?: number;
	qos_level?: number;
}

export interface CMsgIPAddress {
	v4?: number;
	v6?: Buffer;
}

export interface CMsgIPAddressBucket {
	original_ip_address?: CMsgIPAddress;
	bucket?: string;
}

export interface CMsgGCRoutingProtoBufHeader {
	dst_gcid_queue?: string;
	dst_gc_dir_index?: number;
}

export interface CMsgProtoBufHeader {
	steamid?: string;
	client_sessionid?: number;
	routing_appid?: number;
	jobid_source?: string;
	jobid_target?: string;
	target_job_name?: string;
	seq_num?: number;
	eresult?: EResult;
	error_message?: string;
	auth_account_flags?: number;
	token_source?: number;
	admin_spoofing_user?: boolean;
	transport_error?: number;
	messageid?: string;
	publisher_group_id?: number;
	sysid?: number;
	trace_tag?: string;
	webapi_key_id?: number;
	is_from_external_source?: boolean;
	forward_to_sysid?: number[];
	cm_sysid?: number;
	launcher_type?: number;
	realm?: number;
	timeout_ms?: number;
	debug_source?: string;
	debug_source_string_index?: number;
	token_id?: string;
	routing_gc?: CMsgGCRoutingProtoBufHeader;
	ip?: number;
	ip_v6?: Buffer;
}

export interface CMsgMulti {
	size_unzipped?: number;
	message_body?: Buffer;
}

export interface CMsgProtobufWrapped {
	message_body?: Buffer;
}

export interface CMsgAuthTicket {
	estate?: number;
	eresult?: EResult;
	steamid?: string;
	gameid?: string;
	h_steam_pipe?: number;
	ticket_crc?: number;
	ticket?: Buffer;
	server_secret?: Buffer;
}

export interface CCDDBAppDetailCommon {
	appid?: number;
	name?: string;
	icon?: string;
	tool?: boolean;
	demo?: boolean;
	media?: boolean;
	community_visible_stats?: boolean;
	friendly_name?: string;
	propagation?: string;
	has_adult_content?: boolean;
	is_visible_in_steam_china?: boolean;
	app_type?: number;
	has_adult_content_sex?: boolean;
	has_adult_content_violence?: boolean;
	content_descriptorids?: number[];
}

export interface CMsgAppRights {
	edit_info?: boolean;
	publish?: boolean;
	view_error_data?: boolean;
	download?: boolean;
	upload_cdkeys?: boolean;
	generate_cdkeys?: boolean;
	view_financials?: boolean;
	manage_ceg?: boolean;
	manage_signing?: boolean;
	manage_cdkeys?: boolean;
	edit_marketing?: boolean;
	economy_support?: boolean;
	economy_support_supervisor?: boolean;
	manage_pricing?: boolean;
	broadcast_live?: boolean;
	view_marketing_traffic?: boolean;
	edit_store_display_content?: boolean;
}

export interface CCuratorPreferences {
	supported_languages?: number;
	platform_windows?: boolean;
	platform_mac?: boolean;
	platform_linux?: boolean;
	vr_content?: boolean;
	adult_content_violence?: boolean;
	adult_content_sex?: boolean;
	timestamp_updated?: number;
	tagids_curated?: number[];
	tagids_filtered?: number[];
	website_title?: string;
	website_url?: string;
	discussion_url?: string;
	show_broadcast?: boolean;
}

export interface CLocalizationToken {
	language?: number;
	localized_string?: string;
}

export interface CClanEventUserNewsTuple {
	clanid?: number;
	event_gid?: string;
	announcement_gid?: string;
	rtime_start?: number;
	rtime_end?: number;
	priority_score?: number;
	type?: number;
	clamp_range_slot?: number;
	appid?: number;
	rtime32_last_modified?: number;
}

export interface CClanMatchEventByRange {
	rtime_before?: number;
	rtime_after?: number;
	qualified?: number;
	events?: CClanEventUserNewsTuple[];
}

export interface CCommunity_ClanAnnouncementInfo {
	gid?: string;
	clanid?: string;
	posterid?: string;
	headline?: string;
	posttime?: number;
	updatetime?: number;
	body?: string;
	commentcount?: number;
	tags?: string[];
	language?: number;
	hidden?: boolean;
	forum_topic_id?: string;
	event_gid?: string;
	voteupcount?: number;
	votedowncount?: number;
	ban_check_result?: EBanContentCheckResult;
	banned?: boolean;
}

export interface CClanEventData {
	gid?: string;
	clan_steamid?: string;
	event_name?: string;
	event_type?: EProtoClanEventType;
	appid?: number;
	server_address?: string;
	server_password?: string;
	rtime32_start_time?: number;
	rtime32_end_time?: number;
	comment_count?: number;
	creator_steamid?: string;
	last_update_steamid?: string;
	event_notes?: string;
	jsondata?: string;
	announcement_body?: CCommunity_ClanAnnouncementInfo;
	published?: boolean;
	hidden?: boolean;
	rtime32_visibility_start?: number;
	rtime32_visibility_end?: number;
	broadcaster_accountid?: number;
	follower_count?: number;
	ignore_count?: number;
	forum_topic_id?: string;
	rtime32_last_modified?: number;
	news_post_gid?: string;
	rtime_mod_reviewed?: number;
	featured_app_tagid?: number;
	referenced_appids?: number[];
	build_id?: number;
	build_branch?: string;
}

export interface CBilling_Address {
	first_name?: string;
	last_name?: string;
	address1?: string;
	address2?: string;
	city?: string;
	us_state?: string;
	country_code?: string;
	postcode?: string;
	zip_plus4?: number;
	phone?: string;
}

export interface CPackageReservationStatus {
	packageid?: number;
	reservation_state?: number;
	queue_position?: number;
	total_queue_size?: number;
	reservation_country_code?: string;
	expired?: boolean;
	time_expires?: number;
	time_reserved?: number;
}

export interface CMsgKeyValuePair {
	name?: string;
	value?: string;
}

export interface CMsgKeyValueSet {
	pairs?: CMsgKeyValuePair[];
}

export interface NoResponse {
}

export interface CAuthentication_GetPasswordRSAPublicKey_Request {
	account_name?: string;
}

export interface CAuthentication_GetPasswordRSAPublicKey_Response {
	publickey_mod?: string;
	publickey_exp?: string;
	timestamp?: string;
}

export interface CAuthentication_DeviceDetails {
	device_friendly_name?: string;
	platform_type?: EAuthTokenPlatformType;
	os_type?: number;
	gaming_device_type?: number;
	client_count?: number;
	machine_id?: Buffer;
}

export interface CAuthentication_BeginAuthSessionViaQR_Request {
	device_friendly_name?: string;
	platform_type?: EAuthTokenPlatformType;
	device_details?: CAuthentication_DeviceDetails;
	website_id?: string;
}

export interface CAuthentication_AllowedConfirmation {
	confirmation_type?: EAuthSessionGuardType;
	associated_message?: string;
}

export interface CAuthentication_BeginAuthSessionViaQR_Response {
	client_id?: string;
	challenge_url?: string;
	request_id?: Buffer;
	interval?: number;
	allowed_confirmations?: CAuthentication_AllowedConfirmation[];
	version?: number;
}

export interface CAuthentication_BeginAuthSessionViaCredentials_Request {
	device_friendly_name?: string;
	account_name?: string;
	encrypted_password?: string;
	encryption_timestamp?: string;
	remember_login?: boolean;
	platform_type?: EAuthTokenPlatformType;
	persistence?: ESessionPersistence;
	website_id?: string;
	device_details?: CAuthentication_DeviceDetails;
	guard_data?: string;
	language?: number;
	qos_level?: number;
}

export interface CAuthentication_BeginAuthSessionViaCredentials_Response {
	client_id?: string;
	request_id?: Buffer;
	interval?: number;
	allowed_confirmations?: CAuthentication_AllowedConfirmation[];
	steamid?: string;
	weak_token?: string;
	agreement_session_url?: string;
	extended_error_message?: string;
}

export interface CAuthentication_PollAuthSessionStatus_Request {
	client_id?: string;
	request_id?: Buffer;
	token_to_revoke?: string;
}

export interface CAuthentication_PollAuthSessionStatus_Response {
	new_client_id?: string;
	new_challenge_url?: string;
	refresh_token?: string;
	access_token?: string;
	had_remote_interaction?: boolean;
	account_name?: string;
	new_guard_data?: string;
	agreement_session_url?: string;
}

export interface CAuthentication_GetAuthSessionInfo_Request {
	client_id?: string;
}

export interface CAuthentication_GetAuthSessionInfo_Response {
	ip?: string;
	geoloc?: string;
	city?: string;
	state?: string;
	country?: string;
	platform_type?: EAuthTokenPlatformType;
	device_friendly_name?: string;
	version?: number;
	login_history?: EAuthSessionSecurityHistory;
	requestor_location_mismatch?: boolean;
	high_usage_login?: boolean;
	requested_persistence?: ESessionPersistence;
}

export interface CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
	version?: number;
	client_id?: string;
	steamid?: string;
	signature?: Buffer;
	confirm?: boolean;
	persistence?: ESessionPersistence;
}

export interface CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
}

export interface CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
	client_id?: string;
	steamid?: string;
	code?: string;
	code_type?: EAuthSessionGuardType;
}

export interface CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
	agreement_session_url?: string;
}

export interface CAuthentication_AccessToken_GenerateForApp_Request {
	refresh_token?: string;
	steamid?: string;
	renewal_type?: ETokenRenewalType;
}

export interface CAuthentication_AccessToken_GenerateForApp_Response {
	access_token?: string;
	refresh_token?: string;
}

export interface CAuthentication_RefreshToken_Enumerate_Request {
}

export interface CAuthentication_RefreshToken_Enumerate_Response {
	refresh_tokens?: CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription[];
	requesting_token?: string;
}

export interface CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
	time?: number;
	ip?: CMsgIPAddress;
	locale?: string;
	country?: string;
	state?: string;
	city?: string;
}

export interface CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
	token_id?: string;
	token_description?: string;
	time_updated?: number;
	platform_type?: EAuthTokenPlatformType;
	logged_in?: boolean;
	os_platform?: number;
	auth_type?: number;
	gaming_device_type?: number;
	first_seen?: CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent;
	last_seen?: CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent;
	os_type?: number;
}

export interface CAuthentication_GetAuthSessionsForAccount_Request {
}

export interface CAuthentication_GetAuthSessionsForAccount_Response {
	client_ids?: string[];
}

export interface CAuthentication_MigrateMobileSession_Request {
	steamid?: string;
	token?: string;
	signature?: string;
}

export interface CAuthentication_MigrateMobileSession_Response {
	refresh_token?: string;
	access_token?: string;
}

export interface CAuthentication_Token_Revoke_Request {
	token?: string;
	revoke_action?: EAuthTokenRevokeAction;
}

export interface CAuthentication_Token_Revoke_Response {
}

export interface CAuthentication_RefreshToken_Revoke_Request {
	token_id?: string;
	steamid?: string;
	revoke_action?: EAuthTokenRevokeAction;
	signature?: Buffer;
}

export interface CAuthentication_RefreshToken_Revoke_Response {
}

export interface CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
	steamid?: string;
	include_revoked_tokens?: boolean;
}

export interface CSupportRefreshTokenDescription {
	token_id?: string;
	token_description?: string;
	time_updated?: number;
	platform_type?: EAuthTokenPlatformType;
	token_state?: EAuthTokenState;
	owner_steamid?: string;
	os_platform?: number;
	os_type?: number;
	auth_type?: number;
	gaming_device_type?: number;
	first_seen?: CSupportRefreshTokenDescription_TokenUsageEvent;
	last_seen?: CSupportRefreshTokenDescription_TokenUsageEvent;
}

export interface CSupportRefreshTokenDescription_TokenUsageEvent {
	time?: number;
	ip?: CMsgIPAddress;
	country?: string;
	state?: string;
	city?: string;
}

export interface CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
	refresh_tokens?: CSupportRefreshTokenDescription[];
	last_token_reset?: number;
}

export interface CAuthenticationSupport_QueryRefreshTokenByID_Request {
	token_id?: string;
}

export interface CAuthenticationSupport_QueryRefreshTokenByID_Response {
	refresh_tokens?: CSupportRefreshTokenDescription[];
}

export interface CAuthenticationSupport_RevokeToken_Request {
	token_id?: string;
	steamid?: string;
}

export interface CAuthenticationSupport_RevokeToken_Response {
}

export interface CAuthenticationSupport_GetTokenHistory_Request {
	token_id?: string;
}

export interface CSupportRefreshTokenAudit {
	action?: number;
	time?: number;
	ip?: CMsgIPAddress;
	actor?: string;
}

export interface CAuthenticationSupport_GetTokenHistory_Response {
	history?: CSupportRefreshTokenAudit[];
}

export interface CCloudGaming_CreateNonce_Request {
	platform?: string;
	appid?: number;
}

export interface CCloudGaming_CreateNonce_Response {
	nonce?: string;
	expiry?: number;
}

export interface CCloudGaming_GetTimeRemaining_Request {
	platform?: string;
	appid_list?: number[];
}

export interface CCloudGaming_TimeRemaining {
	appid?: number;
	minutes_remaining?: number;
}

export interface CCloudGaming_GetTimeRemaining_Response {
	entries?: CCloudGaming_TimeRemaining[];
}

export interface Authentication {
}

export interface AuthenticationSupport {
}

export interface CloudGaming {
}

///////////////////////////////////////////////
// enums.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// steammessages_auth.steamclient.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// steammessages_base.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// steammessages_clientserver_login.proto
///////////////////////////////////////////////

export interface CMsgClientHeartBeat {
	send_reply?: boolean;
}

export interface CMsgClientServerTimestampRequest {
	client_request_timestamp?: string;
}

export interface CMsgClientServerTimestampResponse {
	client_request_timestamp?: string;
	server_timestamp_ms?: string;
}

export interface CMsgClientSecret {
	version?: number;
	appid?: number;
	deviceid?: number;
	nonce?: string;
	hmac?: Buffer;
}

export interface CMsgClientHello {
	protocol_version?: number;
}

export interface CMsgClientLogon {
	protocol_version?: number;
	deprecated_obfustucated_private_ip?: number;
	cell_id?: number;
	last_session_id?: number;
	client_package_version?: number;
	client_language?: string;
	client_os_type?: number;
	should_remember_password?: boolean;
	wine_version?: string;
	deprecated_10?: number;
	obfuscated_private_ip?: CMsgIPAddress;
	deprecated_public_ip?: number;
	qos_level?: number;
	client_supplied_steam_id?: string;
	public_ip?: CMsgIPAddress;
	machine_id?: Buffer;
	launcher_type?: number;
	ui_mode?: number;
	chat_mode?: number;
	steam2_auth_ticket?: Buffer;
	email_address?: string;
	rtime32_account_creation?: number;
	account_name?: string;
	password?: string;
	game_server_token?: string;
	login_key?: string;
	was_converted_deprecated_msg?: boolean;
	anon_user_target_account_name?: string;
	resolved_user_steam_id?: string;
	eresult_sentryfile?: number;
	sha_sentryfile?: Buffer;
	auth_code?: string;
	otp_type?: number;
	otp_value?: number;
	otp_identifier?: string;
	steam2_ticket_request?: boolean;
	sony_psn_ticket?: Buffer;
	sony_psn_service_id?: string;
	create_new_psn_linked_account_if_needed?: boolean;
	sony_psn_name?: string;
	game_server_app_id?: number;
	steamguard_dont_remember_computer?: boolean;
	machine_name?: string;
	machine_name_userchosen?: string;
	country_override?: string;
	is_steam_box?: boolean;
	client_instance_id?: string;
	two_factor_code?: string;
	supports_rate_limit_response?: boolean;
	web_logon_nonce?: string;
	priority_reason?: number;
	embedded_client_secret?: CMsgClientSecret;
	disable_partner_autogrants?: boolean;
	is_steam_deck?: boolean;
	access_token?: string;
	is_chrome_os?: boolean;
	is_tesla?: boolean;
}

export interface CMsgClientLogonResponse {
	eresult?: EResult;
	legacy_out_of_game_heartbeat_seconds?: number;
	heartbeat_seconds?: number;
	deprecated_public_ip?: number;
	rtime32_server_time?: number;
	account_flags?: number;
	cell_id?: number;
	email_domain?: string;
	steam2_ticket?: Buffer;
	eresult_extended?: number;
	webapi_authenticate_user_nonce?: string;
	cell_id_ping_threshold?: number;
	deprecated_use_pics?: boolean;
	vanity_url?: string;
	public_ip?: CMsgIPAddress;
	client_supplied_steamid?: string;
	ip_country_code?: string;
	parental_settings?: Buffer;
	parental_setting_signature?: Buffer;
	count_loginfailures_to_migrate?: number;
	count_disconnects_to_migrate?: number;
	ogs_data_report_time_window?: number;
	client_instance_id?: string;
	force_client_update_check?: boolean;
	agreement_session_url?: string;
	token_id?: string;
}

export interface CMsgClientRequestWebAPIAuthenticateUserNonce {
	token_type?: number;
}

export interface CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
	eresult?: EResult;
	webapi_authenticate_user_nonce?: string;
	token_type?: number;
}

export interface CMsgClientLogOff {
}

export interface CMsgClientLoggedOff {
	eresult?: EResult;
}

export interface CMsgClientNewLoginKey {
	unique_id?: number;
	login_key?: string;
}

export interface CMsgClientNewLoginKeyAccepted {
	unique_id?: number;
}

export interface CMsgClientAccountInfo {
	persona_name?: string;
	ip_country?: string;
	count_authed_computers?: number;
	account_flags?: number;
	facebook_id?: string;
	facebook_name?: string;
	steamguard_machine_name_user_chosen?: string;
	is_phone_verified?: boolean;
	two_factor_state?: number;
	is_phone_identifying?: boolean;
	is_phone_needing_reverify?: boolean;
}

export interface CMsgClientChallengeRequest {
	steamid?: string;
}

export interface CMsgClientChallengeResponse {
	challenge?: string;
}

///////////////////////////////////////////////
// steammessages_unified_base.steamclient.proto
///////////////////////////////////////////////

